openapi: 3.0.3

info:
  title: Incredible Four
  description: API Documentation for our Social
    Media App
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ALIFMUHAMADHAFIDZ23/SocialMedia-Group4/1.0.0
  - url: remotecareer.tech
    description: digunakan untuk uji coba
  - url: remotecareer.tech
    description: digunakan untuk running
tags:
  - name: Auth
  - name: User
  - name: Content
  - name: Comment
paths:
  /register:
    post:
      tags:
        - "Auth"
      description: Create New User
      summary: register user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: "Register Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                message: "succes creating new user"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
  /login:
    post:
      tags:
        - "Auth"
      description: Login to the System
      summary: login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: alifmh123
                password:
                  type: string
                  format: password
                  example: alif123
      responses:
        200:
          description: "login berhasil"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 1
                  nama: Alif Muhamad Hafidz
                  username: alifmh123
                  email: alifmuhamadhafidz23@gmail.com
                  pp_path: "/path/alif.png"
                  token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJ1c2VySUQiOjR9.QTZxERh4CwC_UnL_eJvTi_A_qdLeBZ-IjR4nqoxjodk
                message: "login success"
                
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
  /users/{username}:
    get:
      tags:
        - "User"
      description: get user content
      summary: get user content
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "success get user content"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
              example:
                data :
                  id : 1
                  pp_path : "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                  banner : "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A40.jpg"
                  name: Alif Muhamad Hafidz,
                  username: alifmh123,
                  bio : ALTA BE 14
                  contents: [{
                    pp_path : "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg",
                    username: alifmh123,
                    img_path: "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg",
                    caption: gunung semeru,
                    created_at: 16-01-23 11:47,
                    comments :[{
                      pp_path : "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg",
                      username : alifmh123,
                      text: hallo guys,
                      created_at : 16-01-23 11:50
                    },
                    {
                      pp_path: "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg",
                      username: habib123,
                      text: hai guys,
                      created_at: 16-01-23 11:51
                    }]
                  },
                  {
                    pp_path : "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg",
                    username: alifmh123,
                    img_path: "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg",
                    caption : gunung gede,
                    created_at: 16-01-23 11:37,
                    comments :[{
                      pp_path : "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg",
                      username : alifmh123,
                      text: hallo guys,
                      created_at : 16-01-23 11:38
                    },
                    {
                      pp_path: "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg",
                      username: habib123,
                      text: hai guys,
                      created_at: 16-01-23 11:39
                    }]
                  }
                  ]
                
                message: "success get user content"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
  /users:
    get:
      tags:
        - "User"
      description: get data user
      summary: get data user
      security:
        - JWTAuth: []
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: success show profile
          content:
            application/json:
              schema:
                type: object
              example:
                data: 
                  id : 1
                  pp_path: "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                  banner : "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                  name: Alif Muhamad Hafidz
                  username: alifmh123
                  email: alifmuhamadhafidz23@gmail.com
                  bio: smile :)
                message: success show user profile
        404:
          description: data not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "data not found"
        500:
          $ref: "#/components/responses/500"
    put:
      tags:
        - "User"
      description: edit user profile
      summary: edit user profile
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
              schema:
                type: object
                properties: 
                  content:
                    type: string              
                  image:
                    type: string
                    format: binary
          application/json:
            schema:
              type: object
              example:
                pp_path: "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                banner : "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                name: Alif Muhamad Hafidz
                username: alifmh123
                email: alifmuhamadhafidz23@gmail.com
      responses:
        200:
          description: success update profile
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 1
                  pp_path: "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                  banner : "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                  name: Alif Muhamad Hafidz
                  username: alifmh123
                  email: alifmuhamadhafidz23@gmail.com
                message: Succes Update Profile
        404:
          description: data not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "data not found"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - "User"
      description: deactivate user
      summary: deactivate user
      security:
        - JWTAuth: []
      responses:
        200:
          description: success deactivate
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "succes deactivate"
        404:
          description: data not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "data not found"
        500:
          $ref: "#/components/responses/500"
    
  /contents:
    post:
      tags:
        - "Content"
      description: post content
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
              schema:
                type: object
                properties: 
                  content:
                    type: string              
                  image:
                    type: string
                    format: binary
          application/json:
            schema:
              type: object
              example:
                img_path: "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A48.jpg"
                caption: gunung semeru
      responses:
        201:
          description: "succes post content"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
              example:
                data:
                  id : 1
                  img_path: "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A48.jpg"
                  caption: gunung semeru
                  created_at: 16-01-23 11:47
                message: "success post content"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    get:
      tags:
        - "Content"
      description: get all content
      summary: get all content
      responses:
        200:
          description: "success get all content"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
              example:
                data:
                  [{
                  id: 1,
                  pp_path : "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg",
                  username: alifmh123,
                  img_path: "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A48.jpg",
                  caption: gunung semeru,
                  created_at : 16-01-23 11:47,
                  comments: [{
                    pp_path : "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg",
                    username: alifmh123,
                    text : hallo guys,
                    created_at : 16-01-23 11:50
                  },
                  {
                    pp_path : "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A49.jpg",
                    username: habib123,
                    text : hai guys,
                    created_at : 16-01-23 11:51
                  }]}]
                  
                  
                message: "success get all content"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - "Content"
      description: Delete Content
      summary: Delete Content
      security:
        - JWTAuth: []
      responses:
        200:
          description: success delete content
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "success delete content"
        404:
          description: data not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "data not found"
        500:
          $ref: "#/components/responses/500"
  /contents/{id_content}:
    get:
      tags:
        - "Content"
      description: get all content
      summary: get all content
      responses:
        200:
          description: "success get all content"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
              example:
                data:
                  id: 1
                  pp_path : "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                  username: alifmh123
                  img_path: "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A48.jpg"
                  caption: gunung semeru
                  created_at : 16-01-23 11:47
                  comments: [{
                    pp_path : "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg",
                    username: alifmh123,
                    text : hallo guys,
                    created_at : 16-01-23 11:50
                  },
                  {
                    pp_path : "https://incredible4.s3.amazonaws.com/2022-07-06%2006%3A40%3A49.jpg",
                    username: habib123,
                    text : hai guys,
                    created_at : 16-01-23 11:51
                  }]
                  
                  
                message: "success get all content"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    put:
      tags:
        - "Content"
      description: edit user content
      summary: edit user content
      security:
        - JWTAuth: []
      parameters:
        - name: id_content
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                caption: gunung semeru
      responses:
        200:
          description: "success edit user content"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
              example:
                data:
                  id : 1
                  caption : gunung semeru
                  updated_at : 16-01-23 13:38
                message: "success edit user content"
        404:
          description: data not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "data not found"
        500:
          $ref: "#/components/responses/500"
  /comments/{id_content}:
    post:
      tags:
        - "Comment"
      description: insert new comment
      summary: insert new comment
      security:
        - JWTAuth: []
      parameters:
        - name: id_content
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                text: bang giveaway bang
      responses:
        200:
          description: "success post comment"
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    text: bang giveaway bang
                  message: success create comment
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
  /comments/{id_comment}:
    delete:
      tags:
        - "Comment"
      description: Delete Comment
      summary: Delete Comment
      security:
        - JWTAuth: []
      parameters:
        - name: id_comment
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: success delete comment
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "success delete comment"
        404:
          description: data not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "data not found"
        500:
          $ref: "#/components/responses/500"
    

components:
  securitySchemes:
    JWTAuth:           
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
          example: Alif Muhamad Hafidz
        username:
          type: string
          example: alifmh123
        email:
          type: string
          format: email
          example: alifmuhamadhafidz23@gmail.com
        password:
          type: string
          format: password
          example: alif123
    Content:
      type: object
      properties:
        pp_path:
          type: string
          example: content/post.jpg
        caption:
          type: string
          example: gunung semeru
    responseObject:
      type: object
      properties:
        data:
          type: object
        message:
          type: string
  responses:
    400:
      description: "Invalid User Input"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "invalid input"

    500:
      description: "Servers Problem"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "unable to process the data"