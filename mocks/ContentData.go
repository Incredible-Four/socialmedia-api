// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	content "incrediblefour/features/content"

	mock "github.com/stretchr/testify/mock"
)

// ContentData is an autogenerated mock type for the ContentData type
type ContentData struct {
	mock.Mock
}

// Add provides a mock function with given fields: userID, newContent
func (_m *ContentData) Add(userID uint, newContent content.Core) (content.Core, error) {
	ret := _m.Called(userID, newContent)

	var r0 content.Core
	if rf, ok := ret.Get(0).(func(uint, content.Core) content.Core); ok {
		r0 = rf(userID, newContent)
	} else {
		r0 = ret.Get(0).(content.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, content.Core) error); ok {
		r1 = rf(userID, newContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentDetail provides a mock function with given fields: contentID
func (_m *ContentData) ContentDetail(contentID uint) (content.Core, error) {
	ret := _m.Called(contentID)

	var r0 content.Core
	if rf, ok := ret.Get(0).(func(uint) content.Core); ok {
		r0 = rf(contentID)
	} else {
		r0 = ret.Get(0).(content.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(contentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentList provides a mock function with given fields:
func (_m *ContentData) ContentList() ([]content.Core, error) {
	ret := _m.Called()

	var r0 []content.Core
	if rf, ok := ret.Get(0).(func() []content.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]content.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userID, contentID
func (_m *ContentData) Delete(userID uint, contentID uint) error {
	ret := _m.Called(userID, contentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userID, contentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProfile provides a mock function with given fields: username
func (_m *ContentData) GetProfile(username string) ([]content.Core, error) {
	ret := _m.Called(username)

	var r0 []content.Core
	if rf, ok := ret.Get(0).(func(string) []content.Core); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]content.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userID, contentID, updatedContent
func (_m *ContentData) Update(userID uint, contentID uint, updatedContent content.Core) (content.Core, error) {
	ret := _m.Called(userID, contentID, updatedContent)

	var r0 content.Core
	if rf, ok := ret.Get(0).(func(uint, uint, content.Core) content.Core); ok {
		r0 = rf(userID, contentID, updatedContent)
	} else {
		r0 = ret.Get(0).(content.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, content.Core) error); ok {
		r1 = rf(userID, contentID, updatedContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewContentData interface {
	mock.TestingT
	Cleanup(func())
}

// NewContentData creates a new instance of ContentData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContentData(t mockConstructorTestingTNewContentData) *ContentData {
	mock := &ContentData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
